[gd_scene load_steps=7 format=3 uid="uid://c4h6ygdquxq3u"]

[sub_resource type="Shader" id="Shader_4tmr0"]
code = "shader_type canvas_item;

// The texture that will be distorted and scrolled for the portal effect
uniform sampler2D portal_texture : source_color, filter_linear_mipmap_anisotropic;

// --- Effect Configuration ---

// General color tint for the portal
uniform vec4 portal_tint : source_color = vec4(1.0, 1.0, 1.0, 1.0);

// Vortex Shape and Twist
// Defines the radius from the center where the vortex effects (like twist) are prominent.
uniform float vortex_effect_radius : hint_range(0.01, 1.0, 0.01) = 0.5;
// Strength of the twisting effect. Higher values mean more spiraling.
uniform float twist_strength : hint_range(0.0, 30.0, 0.1) = 8.0;

// Pulsation (Timing and Magnitude)
// Speed of the pulsation cycle. Affects how fast the portal twists and breathes.
uniform float pulsation_speed : hint_range(0.0, 5.0, 0.01) = 0.7;
// Magnitude of the shrink/expand \"breathing\" effect.
uniform float breath_magnitude : hint_range(-0.3, 0.3, 0.005) = 0.05;

// Overall Rotation
// Constant rotation speed for the entire portal.
uniform float overall_rotation_speed : hint_range(-2.0, 2.0, 0.01) = 0.25;

// Texture Scrolling
// Speed at which the portal_texture scrolls in the X direction.
uniform float texture_scroll_speed_x : hint_range(-1.0, 1.0, 0.01) = 0.08;
// Speed at which the portal_texture scrolls in the Y direction.
uniform float texture_scroll_speed_y : hint_range(-1.0, 1.0, 0.01) = 0.03;

// Appearance
// How soft the edge of the portal fades to transparency.
uniform float edge_softness : hint_range(0.01, 0.5, 0.005) = 0.1;


// --- Utility Functions ---

// Rotation matrix function
mat2 rotate(float angle) {
    float s = sin(angle);
    float c = cos(angle);
    return mat2(vec2(c, -s), vec2(s, c));
}

// --- Fragment Shader Logic ---

void fragment() {
    // --- 1. UV Preparation and Aspect Correction ---
    vec2 node_pixel_size = 1.0 / TEXTURE_PIXEL_SIZE;
    vec2 uv = UV - 0.5;

    if (node_pixel_size.x > node_pixel_size.y) {
        uv.x *= node_pixel_size.x / node_pixel_size.y;
    } else if (node_pixel_size.y > node_pixel_size.x) {
        uv.y *= node_pixel_size.y / node_pixel_size.x;
    }

    // --- 2. Time-based Progress for Pulsation ---
    float time_progress = sin(TIME * pulsation_speed);

    // --- 3. Overall Rotation ---
    if (overall_rotation_speed != 0.0) {
        uv = rotate(TIME * overall_rotation_speed) * uv;
    }

    // --- 4. Calculate Distance and Angle (Polar Coordinates) ---
    float distance_from_center = length(uv);

    // --- 5. Vortex/Twist Effect ---
    float twist_spatial_factor = smoothstep(0.0, vortex_effect_radius, vortex_effect_radius - distance_from_center);
    float current_animated_twist = twist_strength * time_progress;
    float twist_angle = twist_spatial_factor * current_animated_twist;

    if (distance_from_center < vortex_effect_radius) {
        uv = rotate(twist_angle) * uv;
    }

    // --- 6. Pulsating Shrink/Expand (\"Breathing\") Effect ---
    float breath_value = breath_magnitude * time_progress;
    if (distance_from_center > 0.0001) {
        float new_radial_distance = max(0.0, distance_from_center + breath_value);
        uv *= (new_radial_distance / distance_from_center);
    }

    // --- 7. Texture Scrolling ---
    // Combine the X and Y scroll speed uniforms into a vec2
    vec2 texture_scroll_speed = vec2(texture_scroll_speed_x, texture_scroll_speed_y);
    vec2 scroll_offset = TIME * texture_scroll_speed;
    vec2 final_scrolling_uv = uv + scroll_offset;

    // --- 8. Revert Aspect Correction and De-center for Texture Sampling ---
    if (node_pixel_size.x > node_pixel_size.y) {
        final_scrolling_uv.x /= (node_pixel_size.x / node_pixel_size.y);
    } else if (node_pixel_size.y > node_pixel_size.x) {
        final_scrolling_uv.y /= (node_pixel_size.y / node_pixel_size.x);
    }
    final_scrolling_uv += 0.5;

    // --- 9. Alpha Calculation for Portal Edge ---
    float alpha = smoothstep(vortex_effect_radius, vortex_effect_radius - edge_softness, distance_from_center);

    // --- 10. Texture Sampling and Final Color ---
    vec4 texture_color = texture(portal_texture, fract(final_scrolling_uv));

    COLOR = texture_color * portal_tint;
    COLOR.a *= alpha;

    if (UV.x < 0.0 || UV.x > 1.0 || UV.y < 0.0 || UV.y > 1.0) {
        COLOR.a = 0.0;
    }
}"

[sub_resource type="Gradient" id="Gradient_86clq"]
offsets = PackedFloat32Array(0.17117117, 0.45045045, 0.6891892, 1)
colors = PackedColorArray(0, 0.61624646, 0, 1, 0, 0, 0, 1, 0, 0.64705884, 0, 1, 1, 1, 1, 1)

[sub_resource type="GradientTexture1D" id="GradientTexture1D_uxyan"]
gradient = SubResource("Gradient_86clq")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_t2xbv"]
shader = SubResource("Shader_4tmr0")
shader_parameter/portal_texture = SubResource("GradientTexture1D_uxyan")
shader_parameter/portal_tint = Color(0, 1, 0, 1)
shader_parameter/vortex_effect_radius = 0.5
shader_parameter/twist_strength = 8.0
shader_parameter/pulsation_speed = 1.58999996446032
shader_parameter/breath_magnitude = 0.05
shader_parameter/overall_rotation_speed = 0.25
shader_parameter/texture_scroll_speed_x = 0.26999997161295997
shader_parameter/texture_scroll_speed_y = 0.03
shader_parameter/edge_softness = 0.1

[sub_resource type="PlaceholderTexture2D" id="PlaceholderTexture2D_w0qyt"]

[sub_resource type="CircleShape2D" id="CircleShape2D_wmjqw"]
radius = 12.0

[node name="Alive Portal" type="Area2D"]
scale = Vector2(4, 4)

[node name="TextureRect" type="TextureRect" parent="."]
material = SubResource("ShaderMaterial_t2xbv")
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -20.0
offset_top = -20.0
offset_right = 20.0
offset_bottom = 20.0
grow_horizontal = 2
grow_vertical = 2
texture = SubResource("PlaceholderTexture2D_w0qyt")

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource("CircleShape2D_wmjqw")
